# streamlit_app.py
import streamlit as st
import requests  # Th∆∞ vi·ªán ƒë·ªÉ g·ª≠i HTTP request ƒë·∫øn backend FastAPI
import os
from datetime import datetime

# C·∫•u h√¨nh c∆° b·∫£n cho trang Streamlit
st.set_page_config(page_title="Chatbot FAQ", page_icon="ü§ñ", layout="wide")

# Nh√∫ng CSS t√πy ch·ªânh ƒë·ªÉ giao di·ªán ƒë·∫πp h∆°n
st.markdown("""
<style>
/* ... (gi·ªØ nguy√™n CSS) ... */
</style>
""", unsafe_allow_html=True)


# --- Kh·ªüi t·∫°o Session State ---
# Session State d√πng ƒë·ªÉ l∆∞u tr·ªØ tr·∫°ng th√°i c·ªßa ·ª©ng d·ª•ng gi·ªØa c√°c l·∫ßn re-run (t∆∞∆°ng t√°c c·ªßa ng∆∞·ªùi d√πng)
if "google_api_key" not in st.session_state:
    st.session_state.google_api_key = ""
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [] # L∆∞u l·ªãch s·ª≠ chat c·ªßa session hi·ªán t·∫°i
if "uploaded_files" not in st.session_state:
    st.session_state.uploaded_files = [] # L∆∞u danh s√°ch t√™n c√°c file ƒë√£ upload
if "selected_file" not in st.session_state:
    st.session_state.selected_file = None # File ƒëang ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ chat

# --- B·ªë c·ª•c 3 c·ªôt ---
col1, col2, col3 = st.columns([3, 7, 3]) # T·ª∑ l·ªá chi·ªÅu r·ªông c√°c c·ªôt

# --- C·ªôt tr√°i: Qu·∫£n l√Ω t√†i li·ªáu ---
with col1:
    st.header("C·∫•u h√¨nh", divider='rainbow')

    # D√πng expander ƒë·ªÉ ·∫©n/hi·ªán √¥ nh·∫≠p API key
    with st.expander("Nh·∫≠p Google API Key (n·∫øu c·∫ßn)"):
        google_api_key = st.text_input("Google API Key", value=st.session_state.google_api_key, type="password", label_visibility="collapsed")
        if google_api_key:
            st.session_state.google_api_key = google_api_key

    # D√πng st.form ƒë·ªÉ nh√≥m c√°c input v√† m·ªôt n√∫t b·∫•m, tr√°nh re-run kh√¥ng c·∫ßn thi·∫øt
    with st.form("upload_form", clear_on_submit=True):
        st.subheader("1. T·∫£i t√†i li·ªáu")
        uploaded_file = st.file_uploader("T·∫£i l√™n file PDF ho·∫∑c DOCX", type=["pdf", "docx"], label_visibility="collapsed")
        submitted = st.form_submit_button("T·∫£i l√™n v√† x·ª≠ l√Ω")

    # X·ª≠ l√Ω logic sau khi form ƒë∆∞·ª£c submit v√† c√≥ file
    if submitted and uploaded_file:
        with st.spinner("ƒêang x·ª≠ l√Ω t√†i li·ªáu..."): # Hi·ªÉn th·ªã con quay ch·ªù
            # Chu·∫©n b·ªã ƒë·ªÉ g·ªçi API backend
            headers = {"google_api_key": st.session_state.google_api_key} if st.session_state.google_api_key else {}
            # M·ªü file v√† g·ª≠i request POST ƒë·∫øn endpoint /upload
            files = {"file": (uploaded_file.name, uploaded_file.getvalue(), uploaded_file.type)}
            response = requests.post("http://localhost:8000/api/v1/chatbot/upload", files=files, headers=headers)

            if response.status_code == 200:
                st.success(f"T·∫£i l√™n th√†nh c√¥ng: {uploaded_file.name}")
                # C·∫≠p nh·∫≠t danh s√°ch file ƒë√£ upload
                if uploaded_file.name not in st.session_state.uploaded_files:
                    st.session_state.uploaded_files.append(uploaded_file.name)
                # T·ª± ƒë·ªông ch·ªçn file v·ª´a upload n·∫øu ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn
                if not st.session_state.selected_file:
                     st.session_state.selected_file = uploaded_file.name
            else:
                st.error(f"L·ªói server: {response.text}")
        st.rerun() # Ch·∫°y l·∫°i script ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán

    st.markdown("---")
    st.subheader("2. Ch·ªçn t√†i li·ªáu ƒë·ªÉ chat")
    if st.session_state.uploaded_files:
        # Hi·ªÉn th·ªã danh s√°ch c√°c file ƒë√£ upload d∆∞·ªõi d·∫°ng radio button
        selected_file = st.radio(
            "Danh s√°ch t√†i li·ªáu:",
            options=st.session_state.uploaded_files,
            index=st.session_state.uploaded_files.index(st.session_state.selected_file) if st.session_state.selected_file in st.session_state.uploaded_files else 0,
            key="file_selector",
            label_visibility="collapsed"
        )
        # N·∫øu ng∆∞·ªùi d√πng ch·ªçn file kh√°c, c·∫≠p nh·∫≠t state v√† x√≥a l·ªãch s·ª≠ chat c≈©
        if st.session_state.selected_file != selected_file:
             st.session_state.selected_file = selected_file
             st.session_state.chat_history = []
             st.rerun()
    else:
        st.info("Ch∆∞a c√≥ t√†i li·ªáu n√†o.")

# --- C·ªôt gi·ªØa: Khung chat ch√≠nh ---
with col2:
    st.title("ü§ñ Chatbot FAQ")
    if st.session_state.selected_file:
        st.caption(f"ƒêang chat v·ªõi t√†i li·ªáu: **{st.session_state.selected_file}**")

    # V√πng ch·ª©a ƒë·ªÉ hi·ªÉn th·ªã c√°c tin nh·∫Øn
    chat_container = st.container(height=600, border=False)
    with chat_container:
        for msg in st.session_state.chat_history:
            # Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa user ho·∫∑c bot v·ªõi style kh√°c nhau
            align = "user-msg" if msg["role"] == "user" else "bot-msg"
            st.markdown(f'<div class="{align}">{msg["content"]}<div class="time">{msg["time"]}</div></div>', unsafe_allow_html=True)

    # √î nh·∫≠p c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
    question = st.chat_input("H·ªèi v·ªÅ n·ªôi dung trong t√†i li·ªáu...")
    if question:
        if not st.session_state.selected_file:
            st.error("Vui l√≤ng t·∫£i l√™n v√† ch·ªçn m·ªôt t√†i li·ªáu ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        else:
            current_time = datetime.now().strftime("%H:%M:%S")
            # Th√™m c√¢u h·ªèi c·ªßa user v√†o l·ªãch s·ª≠ chat ƒë·ªÉ hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
            st.session_state.chat_history.append({"role": "user", "content": question, "time": current_time})

            # G·ª≠i c√¢u h·ªèi ƒë·∫øn backend API /ask
            headers = {"google_api_key": st.session_state.google_api_key} if st.session_state.google_api_key else {}
            response = requests.post(
                "http://localhost:8000/api/v1/chatbot/ask",
                json={"question": question, "document_name": st.session_state.selected_file},
                headers=headers
            )
            if response.status_code == 200:
                answer = response.json()["answer"]
            else:
                answer = f"L·ªói: {response.json().get('detail', 'Kh√¥ng th·ªÉ nh·∫≠n c√¢u tr·∫£ l·ªùi t·ª´ server.')}"

            # Th√™m c√¢u tr·∫£ l·ªùi c·ªßa bot v√†o l·ªãch s·ª≠ chat
            st.session_state.chat_history.append({"role": "bot", "content": answer, "time": datetime.now().strftime("%H:%M:%S")})
            st.rerun() # Ch·∫°y l·∫°i script ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn m·ªõi

# --- C·ªôt ph·∫£i: L·ªãch s·ª≠ chat (hi·ªÉn th·ªã l·∫°i) ---
with col3:
    st.header("üìú L·ªãch s·ª≠", divider='rainbow')
    if st.button("X√≥a l·ªãch s·ª≠ chat"):
        st.session_state.chat_history = []
        st.rerun()
    
    st.markdown("---")

    if st.session_state.chat_history:
        # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat theo th·ª© t·ª± ng∆∞·ª£c (m·ªõi nh·∫•t ·ªü tr√™n)
        for msg in reversed(st.session_state.chat_history):
            align = "user-msg" if msg["role"] == "user" else "bot-msg"
            st.markdown(f'<div class="{align}">{msg["content"]}<div class="time">{msg["time"]}</div></div>', unsafe_allow_html=True)
    else:
        st.info("Ch∆∞a c√≥ n·ªôi dung tr√≤ chuy·ªán.")